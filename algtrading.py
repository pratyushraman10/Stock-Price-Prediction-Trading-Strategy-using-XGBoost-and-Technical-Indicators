# -*- coding: utf-8 -*-
"""algtrading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XTszSCq93-5q6XUn696PqGRi9kFaOdT3
"""

!pip install ta
import yfinance as yf
import pandas as pd
import numpy as np
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator, EMAIndicator, MACD
from ta.volatility import BollingerBands
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import xgboost as xgb

# Download historical stock data
df = yf.download("AAPL", start="2020-01-01", end="2024-01-01")

# Corrected Feature Engineering
 df["SMA_10"] = SMAIndicator(df["Close"].squeeze(), window=10).sma_indicator()
 df["EMA_10"] = EMAIndicator(df["Close"].squeeze(), window=10).ema_indicator()
 df["RSI"] = RSIIndicator(df["Close"].squeeze(), window=14).rsi()

# MACD
macd = MACD(df["Close"].squeeze())
df["MACD_Line"] = macd.macd().squeeze()
df["MACD_Signal"] = macd.macd_signal().squeeze()

# Bollinger Bands
bb = BollingerBands(df["Close"].squeeze(), window=20, window_dev=2)
df["BB_HBand"] = bb.bollinger_hband().squeeze()
df["BB_LBand"] = bb.bollinger_lband().squeeze()

# Volume indicator
df["Volume_Change"] = df["Volume"].pct_change()

# Target: 1 if tomorrow’s close > today’s close, else 0
df["Target"] = np.where(df["Close"].shift(-1) > df["Close"], 1, 0)
df.dropna(inplace=True)

# Prepare features and target
features = ["SMA_10", "EMA_10", "RSI", "MACD_Line", "MACD_Signal", "BB_HBand", "BB_LBand", "Volume_Change"]
X = df[features]
y = df["Target"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Model training with XGBoost
model = xgb.XGBClassifier(use_label_encoder=False, eval_metric="logloss")
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Simulated Trading Strategy
df_test = df.iloc[len(X_train):].copy()
df_test["Pred_Signal"] = y_pred
df_test["Daily_Return"] = df_test["Close"].pct_change()
df_test["Strategy_Return"] = df_test["Daily_Return"] * df_test["Pred_Signal"]

# Plot cumulative returns (plotting can be run interactively)
import matplotlib.pyplot as plt
(1 + df_test[["Daily_Return", "Strategy_Return"]]).cumprod().plot(figsize=(12, 6))
plt.title("Buy & Hold vs XGBoost Strategy Returns")
plt.show()

# 2. Daily Returns
plt.figure(figsize=(12, 5))
plt.plot(df_test['Daily_Return'], label='Buy & Hold', alpha=0.7)
plt.plot(df_test['Strategy_Return'], label='XGBoost Strategy', alpha=0.7)
plt.title('Daily Returns')
plt.legend()
plt.show()

# 3. Distribution of Daily Returns
plt.figure(figsize=(12, 5))
plt.hist(df_test['Daily_Return'], bins=40, alpha=0.6, label='Buy & Hold')
plt.hist(df_test['Strategy_Return'], bins=40, alpha=0.6, label='XGBoost Strategy')
plt.title('Histogram of Daily Returns')
plt.legend()
plt.show()

# 4. Rolling Volatility (20-day window)
plt.figure(figsize=(12, 5))
plt.plot(df_test.index, df_test['Daily_Return'].rolling(window=20).std(), label='Buy & Hold')
plt.plot(df_test.index, df_test['Strategy_Return'].rolling(window=20).std(), label='XGBoost Strategy')
plt.title('20-Day Rolling Volatility')
plt.legend()
plt.show()

